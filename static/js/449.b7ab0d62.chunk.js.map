{"version":3,"file":"static/js/449.b7ab0d62.chunk.js","mappings":"wKACA,EAA0B,yBAA1B,EAAmE,+BAAnE,EAA8I,0BAA9I,EAAkL,yBAAlL,EAAoN,wB,mBCOvMA,EAAa,SAACC,GACvB,IAAOC,EAAYD,EAAZC,KAAMC,EAAMF,EAANE,GACTC,EAAU,mBAAeD,GAC7B,OACI,SAAC,KAAD,CAASE,GAAID,EAAYE,UAAW,SAACC,GAAD,OAAcA,EAAQ,UAAMC,GAAa,IAA7E,SAAkFN,KCN7EO,EAAU,SAACR,GACpB,IAAOS,EAAWT,EAAXS,QACP,OACI,gBAAKJ,UAAWE,EAAhB,SAA4BE,K,8BCApC,SAASC,EAAgBC,GACrB,IAAIC,EAMJ,OALKD,EAEMA,EAAME,OAAS,KACtBD,EAAQ,4BAFRA,EAAQ,WAILA,EAGJ,IAAME,EAAiB,WAC1B,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,OACI,0BACI,SAAC,KAAD,CACIC,cAAe,CACXR,QAAS,IAEbS,SAAU,SACNC,EADM,GAGJ,IADAC,EACD,EADCA,UAEFL,GAASM,EAAAA,EAAAA,GAAcF,EAAOV,UAC9BW,KATR,SAYK,gBAAGE,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,EAAoBC,aAApB,OACD,UAAC,KAAD,YACI,SAAC,KAAD,CACItB,GAAG,UACHD,KAAK,UACLwB,UAAU,WACVC,YAAY,qBACZC,SAAUjB,IAEbY,EAAOb,SAAWc,EAAQd,UAAW,yBAAMa,EAAOb,WACnD,mBAAQmB,KAAK,SAAb,kCCjBpB,EAnBgB,SAAC5B,GACb,IAAM6B,EAAQ7B,EAAM8B,YAChBC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI,SAACnC,EAAD,CAAuBE,KAAMiC,EAAEjC,KAAMC,GAAIgC,EAAEhC,IAA1BgC,EAAEhC,OAC5DiC,EAAmBN,EAAMO,SAASH,KAAI,SAAAI,GAAC,OAAI,SAAC7B,EAAD,CAAoBC,QAAS4B,EAAE5B,SAAjB4B,EAAEnC,OAE/D,OACI,iBAAKG,UAAWE,EAAhB,WACI,gBAAKF,UAAWE,EAAhB,SACKwB,KAEL,gBAAK1B,UAAWE,EAAhB,SACK4B,KAEL,SAACrB,EAAD,Q,8BCMZ,GALyBwB,EAAAA,EAAAA,KACrBC,EAAAA,EAAAA,KARoB,SAACV,GACrB,MAAO,CACHC,YAAaD,EAAMC,gBAOvBU,EAAAA,EAFqBF,CAGvBG","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__oe96H\",\"dialogs_items\":\"Dialogs_dialogs_items__JafqC\",\"dialog\":\"Dialogs_dialog__htSTl\",\"messages\":\"Dialogs_messages__Cg2l+\",\"message\":\"Dialogs_message__ZEWo0\",\"active\":\"Dialogs_active__t8cjl\"};","import {NavLink} from \"react-router-dom\";\nimport s from \"../Dialogs.module.css\";\nimport React from \"react\";\n\ntype DialogItemPropsType = {\n    name: string\n    id: number\n}\nexport const DialogItem = (props: DialogItemPropsType) => {\n    const {name, id} = props\n    let dialogPath = `/dialogs/${id}`\n    return (\n        <NavLink to={dialogPath} className={(isActive) => isActive ? `${s.active}` : ''}>{name}</NavLink>\n    )\n}\n","import s from \"../Dialogs.module.css\";\nimport React from \"react\";\n\ntype MessagePropsType = {\n    message: string\n}\nexport const Message = (props: MessagePropsType) => {\n    const {message} = props\n    return (\n        <div className={s.message}>{message}</div>\n    )\n}","import React from \"react\";\nimport { Formik, Form, Field } from 'formik';\nimport {sendMessageAC} from \"../../../redux/dialogs-reducer\";\nimport {useAppDispatch} from \"../../../redux/store\";\n\ninterface Values {\n    message: string;\n}\n\nfunction validateMessage(value:string) {\n    let error;\n    if (!value) {\n        error = 'Required';\n    } else if (value.length > 50) {\n        error = 'Your message is too long';\n    }\n    return error;\n}\n\nexport const AddMessageForm = () => {\n    const dispatch = useAppDispatch()\n    return (\n        <div>\n            <Formik\n                initialValues={{\n                    message: '',\n                }}\n                onSubmit={(\n                    values: Values,\n                    { resetForm }\n                ) => {\n                    dispatch(sendMessageAC(values.message))\n                    resetForm();\n                }}\n            >\n                {({ errors, touched, isValidating }) => (\n                <Form>\n                    <Field\n                        id=\"message\"\n                        name=\"message\"\n                        component=\"textarea\"\n                        placeholder=\"Enter your message\"\n                        validate={validateMessage}\n                    />\n                    {errors.message && touched.message && <div>{errors.message}</div>}\n                    <button type=\"submit\">Add message</button>\n                </Form>)}\n            </Formik>\n        </div>\n    );\n};\n\n","import React from 'react';\nimport s from \"./Dialogs.module.css\";\nimport {DialogItem} from \"./DialogItem/DialogItem\";\nimport {Message} from \"./Message/Message\";\nimport {DialogsPropsType} from \"./DialogsContainer\";\n\nimport {AddMessageForm} from \"./AddMessageForm/AddMessageForm\";\n\n\nconst Dialogs = (props: DialogsPropsType) => {\n    const state = props.dialogsPage\n    let dialogsElements = state.dialogs.map(d => <DialogItem key={d.id} name={d.name} id={d.id}/>)\n    let messagesElements = state.messages.map(m => <Message key={m.id} message={m.message}/>)\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogs_items}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                {messagesElements}\n            </div>\n            <AddMessageForm/>\n\n        </div>\n    );\n};\n\nexport default Dialogs;\n\n\n","import React from 'react';\nimport {InitialStateType} from \"redux/dialogs-reducer\";\nimport Dialogs from \"./Dialogs\";\n\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"redux/store\";\nimport {compose} from \"redux\";\nimport {withAuthRedirect} from \"hoc/withAuthRedirect\";\n\n\ntype mapStatePropsType = {\n    dialogsPage: InitialStateType\n}\n\nexport type DialogsPropsType = mapStatePropsType\n\nconst mapStateToProps = (state: AppStateType): mapStatePropsType => {\n    return {\n        dialogsPage: state.dialogsPage,\n    }\n}\n\n\nconst DialogsContainer = compose<React.ComponentType>(\n    connect(mapStateToProps),\n    withAuthRedirect\n)(Dialogs)\n\nexport default DialogsContainer\n\n"],"names":["DialogItem","props","name","id","dialogPath","to","className","isActive","s","Message","message","validateMessage","value","error","length","AddMessageForm","dispatch","useAppDispatch","initialValues","onSubmit","values","resetForm","sendMessageAC","errors","touched","isValidating","component","placeholder","validate","type","state","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","compose","connect","withAuthRedirect","Dialogs"],"sourceRoot":""}